{"version":3,"file":"static/js/59.b97ae134.chunk.js","mappings":"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","sources":["components/wave-motion.tsx"],"sourcesContent":["// WaveSimulation.tsx\r\nimport React, { useMemo, useRef, useState } from 'react'\r\nimport { Canvas, useFrame, ThreeEvent } from '@react-three/fiber'\r\nimport { Line, OrbitControls } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport 'katex/dist/katex.min.css'\r\nimport { InlineMath } from 'react-katex'\r\n\r\ninterface GridWaveProps {\r\n  sourceDistance: number\r\n  period: number\r\n  speed: number\r\n  dot: number\r\n  attenuation: number\r\n  blackThreshold: number\r\n  phaseShift: number\r\n  isRunning: boolean\r\n  isSelectable: boolean\r\n  isExtracted: boolean\r\n  onPointSelected: (point: [number, number, number]) => void\r\n  selectedPoint?: [number, number, number] | null;  \r\n}\r\n\r\n\r\nfunction AnimatedWaveLine({\r\n  start,\r\n  end,\r\n  color,\r\n  phaseShift,\r\n  attenuation,\r\n  frequency,\r\n  speed,\r\n  timeRef,\r\n  isRunning,\r\n}: {\r\n  start: THREE.Vector3;\r\n  end: THREE.Vector3;\r\n  color: string;\r\n  phaseShift: number;\r\n  attenuation: number;\r\n  frequency: number;\r\n  speed: number;\r\n  timeRef: React.MutableRefObject<number>;\r\n  isRunning: boolean;\r\n}) {\r\n  const lineRef = useRef<THREE.Line>(null);\r\n\r\n  const numPoints = 100;\r\n  const positions = useMemo(() => {\r\n    const positions = new Float32Array((numPoints + 1) * 3);\r\n    for (let i = 0; i <= numPoints; i++) {\r\n      const t = i / numPoints;\r\n      const point = start.clone().lerp(end, t);\r\n      positions[i * 3] = point.x;\r\n      positions[i * 3 + 1] = point.y;\r\n      positions[i * 3 + 2] = point.z;\r\n    }\r\n    return positions;\r\n  }, [start, end]);\r\n\r\n  const geometry = useMemo(() => {\r\n    const geometry = new THREE.BufferGeometry();\r\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n    return geometry;\r\n  }, [positions]);\r\n\r\n  useFrame(() => {\r\n    if (!isRunning || !lineRef.current) return;\r\n\r\n    const posAttr = geometry.attributes.position as THREE.BufferAttribute;\r\n    const array = posAttr.array as Float32Array;\r\n\r\n    for (let i = 0; i <= numPoints; i++) {\r\n      const x = array[i * 3];\r\n      const z = array[i * 3 + 2];\r\n      const point = new THREE.Vector3(x, 0, z);\r\n      const distance = start.distanceTo(point);\r\n      const amplitude = 2 * Math.exp(-distance * attenuation / 300);\r\n      const y =\r\n        amplitude * Math.sin(distance * frequency - timeRef.current * speed + phaseShift);\r\n      array[i * 3 + 1] = y;\r\n    }\r\n    posAttr.needsUpdate = true;\r\n  });\r\n\r\n  return (\r\n    <primitive object={new THREE.Line(geometry, new THREE.LineBasicMaterial({ color }))} ref={lineRef} />\r\n  );\r\n}\r\n\r\nfunction GridWave({\r\n  sourceDistance,\r\n  period,\r\n  speed,\r\n  dot,\r\n  attenuation,\r\n  blackThreshold,\r\n  phaseShift,\r\n  isRunning,\r\n  isSelectable,\r\n  isExtracted,\r\n  onPointSelected,\r\n  selectedPoint,\r\n}: GridWaveProps) {\r\n  const meshRef = useRef<THREE.Mesh | null>(null)\r\n  const timeRef = useRef(0)\r\n  const yellowSphereRef = useRef<THREE.Mesh | null>(null)\r\n  const redSphereRef = useRef<THREE.Mesh | null>(null)\r\n  const blueSphereRef = useRef<THREE.Mesh | null>(null)\r\n  const compositeYRef = useRef<number>(0);\r\n  const geometry = useMemo(() => {\r\n    const geo = new THREE.PlaneGeometry(70, 70, dot, dot)\r\n    geo.rotateX(-Math.PI / 2)\r\n\r\n    const colors = new Float32Array(geo.attributes.position.count * 3)\r\n    geo.setAttribute('color', new THREE.BufferAttribute(colors, 3))\r\n\r\n    return geo\r\n  }, [dot])\r\n\r\n  useFrame((state, delta) => {\r\n    if (!isRunning) return;\r\n  \r\n    // 時間の更新\r\n    timeRef.current += delta;\r\n  \r\n    const frequency = 1 / period;\r\n    const source1 = new THREE.Vector3(sourceDistance / 2, 0, 0);\r\n    const source2 = new THREE.Vector3(-sourceDistance / 2, 0, 0);\r\n  \r\n    // 黄色の玉の位置を常に更新\r\n    if (selectedPoint) {\r\n      const selectedPos = new THREE.Vector3(selectedPoint[0], selectedPoint[1], selectedPoint[2]);\r\n  \r\n      const distance1 = selectedPos.distanceTo(source1);\r\n      const amplitude1 = 2 * Math.exp(-distance1 * attenuation / 300);\r\n      const y1 =\r\n        amplitude1 *\r\n        Math.sin(distance1 * frequency - timeRef.current * speed);\r\n  \r\n      const distance2 = selectedPos.distanceTo(source2);\r\n      const amplitude2 = 2 * Math.exp(-distance2 * attenuation / 300);\r\n      const y2 =\r\n        amplitude2 *\r\n        Math.sin(\r\n          distance2 * frequency - timeRef.current * speed + phaseShift\r\n        );\r\n  \r\n      const compositeY = y1 + y2;\r\n  \r\n      if (yellowSphereRef.current) {\r\n        yellowSphereRef.current.position.y = compositeY;\r\n      }\r\n  \r\n      // 振幅を保存\r\n      compositeYRef.current = compositeY;\r\n    }\r\n\r\n    const maxTime = 3 * period // 3 cycles of the wave\r\n    timeRef.current += delta\r\n    if (timeRef.current > maxTime) {\r\n      timeRef.current = 0 // Reset the time after 3 cycles\r\n    }\r\n\r\n\r\n  // 赤い球体（波源1）の位置を更新\r\n  if (redSphereRef.current) {\r\n    const amplitude = 2 // 必要に応じて調整\r\n    const y = amplitude * Math.sin(- timeRef.current * speed)\r\n    redSphereRef.current.position.y = y\r\n  }\r\n\r\n  // 青い球体（波源2）の位置を更新\r\n  if (blueSphereRef.current) {\r\n    const amplitude = 2 // 必要に応じて調整\r\n    const y = amplitude * Math.sin(- timeRef.current * speed + phaseShift)\r\n    blueSphereRef.current.position.y = y\r\n  }\r\n\r\n \r\n    \r\n    if(!(isExtracted && selectedPoint)){\r\n    \r\n      // Regular wave display\r\n      if (!meshRef.current) return\r\n\r\n      const positions = meshRef.current.geometry.attributes.position.array as Float32Array\r\n      const colors = meshRef.current.geometry.attributes.color.array as Float32Array\r\n      const count = positions.length / 3\r\n\r\n      const source1Arr = [sourceDistance / 2, 0, 0]\r\n      const source2Arr = [-sourceDistance / 2, 0, 0]\r\n\r\n      for (let i = 0; i < count; i++) {\r\n        const x = positions[i * 3]\r\n        const yPosIndex = i * 3 + 1\r\n        const z = positions[i * 3 + 2]\r\n\r\n        const distance1 = Math.sqrt(Math.pow(x - source1Arr[0], 2) + Math.pow(z - source1Arr[2], 2))\r\n        const distance2 = Math.sqrt(Math.pow(x - source2Arr[0], 2) + Math.pow(z - source2Arr[2], 2))\r\n\r\n        const amplitude1 = 2 * Math.exp(-distance1 * attenuation / 300)\r\n        let y = amplitude1 * Math.sin(distance1 * frequency - timeRef.current * speed)\r\n\r\n        const amplitude2 = 2 * Math.exp(-distance2 * attenuation / 300)\r\n        y += amplitude2 * Math.sin(distance2 * frequency - timeRef.current * speed + phaseShift)\r\n\r\n        positions[yPosIndex] = y\r\n\r\n        if (Math.abs(y) < blackThreshold) {\r\n          colors[i * 3] = 0\r\n          colors[i * 3 + 1] = 0\r\n          colors[i * 3 + 2] = 0\r\n        } else {\r\n          const colorValue = (y + 2) / 4\r\n          colors[i * 3] = colorValue\r\n          colors[i * 3 + 1] = 0.5\r\n          colors[i * 3 + 2] = 1 - colorValue\r\n        }\r\n      }\r\n\r\n      meshRef.current.geometry.attributes.position.needsUpdate = true\r\n      meshRef.current.geometry.attributes.color.needsUpdate = true\r\n      meshRef.current.geometry.computeVertexNormals()\r\n\r\n      // Reset yellow sphere position\r\n      if (yellowSphereRef.current && selectedPoint) {\r\n        yellowSphereRef.current.position.y = positions[1] // Ground level\r\n      }\r\n    }\r\n  })\r\n\r\n  const handlePointerDown = (event: ThreeEvent<PointerEvent>) => {\r\n    if (!isSelectable) return\r\n    event.stopPropagation()\r\n    const point = event.point\r\n    onPointSelected([point.x, point.y, point.z])\r\n  }\r\n\r\n  // Sources positions\r\n  const source1Pos = new THREE.Vector3(sourceDistance / 2, 0, 0)\r\n  const source2Pos = new THREE.Vector3(-sourceDistance / 2, 0, 0)\r\n\r\n  return (\r\n    <>\r\n      {!isExtracted && (\r\n        <mesh ref={meshRef} onPointerDown={handlePointerDown}>\r\n          <primitive object={geometry} />\r\n          <meshPhongMaterial\r\n            vertexColors={true}\r\n            wireframe={true}\r\n            side={THREE.DoubleSide}\r\n          />\r\n        </mesh>\r\n      )}\r\n\r\n     {selectedPoint && (\r\n    <>\r\n      {/* Wave from source1 */}\r\n      <AnimatedWaveLine\r\n        start={source1Pos}\r\n        end={new THREE.Vector3(selectedPoint[0], selectedPoint[1], selectedPoint[2])}\r\n        color=\"red\"\r\n        phaseShift={0}\r\n        attenuation={attenuation}\r\n        frequency={1 / period}\r\n        speed={speed}\r\n        timeRef={timeRef}\r\n        isRunning={isRunning}\r\n      />\r\n      {/* Wave from source2 */}\r\n      <AnimatedWaveLine\r\n        start={source2Pos}\r\n        end={new THREE.Vector3(selectedPoint[0], selectedPoint[1], selectedPoint[2])}\r\n        color=\"blue\"\r\n        phaseShift={phaseShift}\r\n        attenuation={attenuation}\r\n        frequency={1 / period}\r\n        speed={speed}\r\n        timeRef={timeRef}\r\n        isRunning={isRunning}\r\n      />\r\n    </>\r\n  )}\r\n\r\n      {selectedPoint && (\r\n          <mesh\r\n            ref={yellowSphereRef}\r\n            position={new THREE.Vector3(selectedPoint[0], selectedPoint[1], selectedPoint[2])}\r\n            onPointerDown={handlePointerDown}\r\n          >\r\n            <sphereGeometry args={[0.5, 16, 16]} />\r\n            <meshBasicMaterial color=\"yellow\" />\r\n          </mesh>\r\n\r\n\r\n      )}\r\n      <mesh ref={redSphereRef} position={source1Pos}>\r\n        <sphereGeometry args={[0.5, 16, 16]} />\r\n        <meshBasicMaterial color=\"red\" />\r\n      </mesh>\r\n      <mesh ref={blueSphereRef} position={source2Pos}>\r\n        <sphereGeometry args={[0.5, 16, 16]} />\r\n        <meshBasicMaterial color=\"blue\" />\r\n      </mesh>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default function WaveSimulation() {\r\n  const [sourceDistance, setSourceDistance] = useState<number>(20)\r\n  const [period, setPeriod] = useState<number>(1)\r\n  const [speed, setSpeed] = useState<number>(2)\r\n  const [dot, setDot] = useState<number>(200)\r\n  const [attenuation, setAttenuation] = useState<number>(20)\r\n  const [blackThreshold, setBlackThreshold] = useState<number>(0)\r\n  const [phaseShift, setPhaseShift] = useState<number>(0)\r\n  const [isRunning, setIsRunning] = useState<boolean>(true)\r\n  const [isSelectable, setIsSelectable] = useState<boolean>(true)\r\n  const [isExtracted, setIsExtracted] = useState<boolean>(false)\r\n\r\n  const [selectedPoint, setSelectedPoint] = useState<[number, number, number] | null>(null)\r\n  const [distances, setDistances] = useState<{\r\n    distance1: number\r\n    distance2: number\r\n    distance1InWavelengths: number\r\n    distance2InWavelengths: number\r\n    difference: number\r\n    differenceInWavelengths: number\r\n    integerPart: number\r\n    fractionalPart: number\r\n  } | null>(null)\r\n\r\n  const wavelength = speed * period\r\n\r\n  const handlePhaseShiftChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const degreeValue = parseFloat(event.target.value)\r\n    const radianValue = (degreeValue * Math.PI) / 180\r\n    setPhaseShift(radianValue)\r\n  }\r\n\r\n  const toggleRunning = () => {\r\n    setIsRunning(!isRunning)\r\n  }\r\n\r\n  const onPointSelected = (point: [number, number, number]) => {\r\n    setSelectedPoint(point)\r\n\r\n    const source1 = [sourceDistance / 2, 0, 0]\r\n    const source2 = [-sourceDistance / 2, 0, 0]\r\n\r\n    const distance1 = Math.sqrt(\r\n      Math.pow(point[0] - source1[0], 2) + Math.pow(point[2] - source1[2], 2)\r\n    )\r\n    const distance2 = Math.sqrt(\r\n      Math.pow(point[0] - source2[0], 2) + Math.pow(point[2] - source2[2], 2)\r\n    )\r\n    const difference = Math.abs(distance1 - distance2)\r\n\r\n    const distance1InWavelengths = distance1 / wavelength\r\n    const distance2InWavelengths = distance2 / wavelength\r\n    const differenceInWavelengths = difference / wavelength\r\n\r\n    const integerPart = Math.floor(differenceInWavelengths)\r\n    const fractionalPart = differenceInWavelengths - integerPart\r\n\r\n    setDistances({\r\n      distance1,\r\n      distance2,\r\n      distance1InWavelengths,\r\n      distance2InWavelengths,\r\n      difference,\r\n      differenceInWavelengths,\r\n      integerPart,\r\n      fractionalPart,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-4 max-w-full mx-auto\">\r\n      {/* Section 1: Wave Settings */}\r\n      <div className=\"flex flex-wrap space-x-4 \">\r\n        <label className=\"block text-black\">\r\n          波源の距離: {sourceDistance.toFixed(1)} (λ = {wavelength.toFixed(2)})\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"30\"\r\n            step=\"0.1\"\r\n            value={sourceDistance}\r\n            onChange={(e) => setSourceDistance(parseFloat(e.target.value))}\r\n            className=\"w-full bg-gray-700 rounded\"\r\n          />\r\n        </label>\r\n\r\n        <label className=\"block text-black\">\r\n          周期: {period.toFixed(2)}\r\n          <input\r\n            type=\"range\"\r\n            min=\"0.1\"\r\n            max=\"3\"\r\n            step=\"0.1\"\r\n            value={period}\r\n            onChange={(e) => setPeriod(parseFloat(e.target.value))}\r\n            className=\"w-full bg-gray-700 rounded\"\r\n          />\r\n        </label>\r\n\r\n        <label className=\"block text-black\">\r\n          速さ: {speed.toFixed(2)}\r\n          <input\r\n            type=\"range\"\r\n            min=\"0.1\"\r\n            max=\"10\"\r\n            step=\"0.1\"\r\n            value={speed}\r\n            onChange={(e) => setSpeed(parseFloat(e.target.value))}\r\n            className=\"w-full bg-gray-700 rounded\"\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      {/* Section 2: Display Settings */}\r\n      <div className=\"flex flex-wrap space-x-4\">\r\n        <label className=\"block text-black\">\r\n          減衰度: {attenuation.toFixed(0)}\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            step=\"1\"\r\n            value={attenuation}\r\n            onChange={(e) => setAttenuation(parseFloat(e.target.value))}\r\n            className=\"w-full bg-gray-700 rounded\"\r\n          />\r\n        </label>\r\n\r\n        <label className=\"block text-black\">\r\n          ドット数: {dot.toFixed(0)}\r\n          <input\r\n            type=\"range\"\r\n            min=\"50\"\r\n            max=\"300\"\r\n            step=\"10\"\r\n            value={dot}\r\n            onChange={(e) => setDot(parseFloat(e.target.value))}\r\n            className=\"w-full bg-gray-700 rounded\"\r\n          />\r\n        </label>\r\n\r\n        <label className=\"block text-black\">\r\n          この変位以下を黒色表示: {blackThreshold.toFixed(2)}\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"1\"\r\n            step=\"0.01\"\r\n            value={blackThreshold}\r\n            onChange={(e) => setBlackThreshold(parseFloat(e.target.value))}\r\n            className=\"w-full bg-gray-700 rounded\"\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      {/* Section 3: Source Settings */}\r\n      <div className=\"flex flex-wrap space-x-4 mb-4\">\r\n        <label className=\"block text-black\">\r\n          青色の位相の遅れ: {((phaseShift * 180) / Math.PI).toFixed(0)}°\r\n          （<InlineMath math={`${(phaseShift / Math.PI).toFixed(1)}\\\\pi`} />）\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"360\"\r\n            step=\"30\"\r\n            value={((phaseShift * 180) / Math.PI).toFixed(0)}\r\n            onChange={handlePhaseShiftChange}\r\n            className=\"w-full bg-gray-700 rounded\"\r\n          />\r\n        </label>\r\n        <button\r\n          onClick={toggleRunning}\r\n          className=\"px-4 py-2 text-white bg-blue-500 rounded\"\r\n        >\r\n          {isRunning ? 'Stop' : 'Start'}\r\n        </button>\r\n\r\n        {/* Checkbox to enable/disable point selection */}\r\n        <label className=\"flex items-center text-black\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isSelectable}\r\n            onChange={(e) => {\r\n              setIsSelectable(e.target.checked)\r\n              if (!e.target.checked) {\r\n                setSelectedPoint(null)\r\n                setDistances(null)\r\n                setIsExtracted(false)\r\n              }\r\n            }}\r\n            className=\"mr-2\"\r\n          />\r\n          点を選択する\r\n        </label>\r\n\r\n        {/* Button to extract waves */}\r\n        <button\r\n          onClick={() => setIsExtracted(!isExtracted)}\r\n          className=\"px-4 py-2 text-white bg-green-500 rounded\"\r\n          disabled={!selectedPoint}\r\n        >\r\n          {isExtracted ? '元に戻す' : '波を抽出'}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Canvas 部分 */}\r\n      <div className=\"w-full h-screen bg-gray-900 relative\">\r\n        <Canvas\r\n          className=\"mx-auto w-full h-3/4\"\r\n          camera={{ position: [0, 30, 30], fov: 60 }}\r\n        >\r\n          <OrbitControls />\r\n          <ambientLight intensity={0.5} />\r\n          <pointLight position={[10, 10, 10]} intensity={1} />\r\n          <GridWave\r\n            sourceDistance={sourceDistance}\r\n            period={period}\r\n            speed={speed}\r\n            dot={dot}\r\n            attenuation={attenuation}\r\n            blackThreshold={blackThreshold}\r\n            phaseShift={phaseShift}\r\n            isRunning={isRunning}\r\n            isSelectable={isSelectable}\r\n            isExtracted={isExtracted}\r\n            onPointSelected={onPointSelected}\r\n            selectedPoint={selectedPoint}\r\n          />\r\n        </Canvas>\r\n\r\n        {/* Display distances */}\r\n        {distances && selectedPoint && (\r\n          <div\r\n            style={{\r\n              position: 'absolute',\r\n              top: '10px',\r\n              left: '10px',\r\n              color: 'white',\r\n              background: 'rgba(0,0,0,0.5)',\r\n              padding: '10px',\r\n              pointerEvents: 'none',\r\n            }}\r\n          >\r\n            <p>\r\n              波源(赤)からの距離: {distances.distance1.toFixed(2)} (\r\n              {distances.distance1InWavelengths.toFixed(2)}λ)\r\n            </p>\r\n            <p>\r\n              波源(青)からの距離: {distances.distance2.toFixed(2)} (\r\n              {distances.distance2InWavelengths.toFixed(2)}λ)\r\n            </p>\r\n            <p>\r\n              距離の差: {distances.difference.toFixed(2)} (\r\n              {distances.differenceInWavelengths.toFixed(2)}λ = {distances.integerPart}λ +{' '}\r\n              {distances.fractionalPart.toFixed(2)}λ)\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["AnimatedWaveLine","_ref","start","end","color","phaseShift","attenuation","frequency","speed","timeRef","isRunning","lineRef","useRef","numPoints","positions","useMemo","Float32Array","i","t","point","clone","lerp","x","y","z","geometry","THREE","setAttribute","useFrame","current","posAttr","attributes","position","array","distance","distanceTo","Math","exp","sin","needsUpdate","_jsx","object","ref","GridWave","_ref2","sourceDistance","period","dot","blackThreshold","isSelectable","isExtracted","onPointSelected","selectedPoint","meshRef","yellowSphereRef","redSphereRef","blueSphereRef","compositeYRef","geo","rotateX","PI","colors","count","state","delta","source1","source2","selectedPos","distance1","y1","distance2","compositeY","maxTime","length","source1Arr","source2Arr","yPosIndex","sqrt","pow","abs","colorValue","computeVertexNormals","handlePointerDown","event","stopPropagation","source1Pos","source2Pos","_jsxs","_Fragment","children","onPointerDown","vertexColors","wireframe","side","args","WaveSimulation","setSourceDistance","useState","setPeriod","setSpeed","setDot","setAttenuation","setBlackThreshold","setPhaseShift","setIsRunning","setIsSelectable","setIsExtracted","setSelectedPoint","distances","setDistances","wavelength","className","toFixed","type","min","max","step","value","onChange","e","parseFloat","target","InlineMath","math","radianValue","onClick","toggleRunning","checked","disabled","Canvas","camera","fov","OrbitControls","intensity","difference","distance1InWavelengths","distance2InWavelengths","differenceInWavelengths","integerPart","floor","fractionalPart","style","top","left","background","padding","pointerEvents"],"sourceRoot":""}