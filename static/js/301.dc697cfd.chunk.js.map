{"version":3,"file":"static/js/301.dc697cfd.chunk.js","mappings":"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","sources":["components/ui/slider.tsx","components/ui/label.tsx","components/wave-interference-circular-motion.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\r\n\r\nimport { cn } from \"../../lib/utils\"\r\n\r\nconst Slider = React.forwardRef<\r\n  React.ElementRef<typeof SliderPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\r\n>(({ className, ...props }, ref) => (\r\n  <SliderPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex w-full touch-none select-none items-center\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-gray-300\">\r\n      <SliderPrimitive.Range className=\"absolute h-full bg-blue-600\" />\r\n    </SliderPrimitive.Track>\r\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-gray-400 bg-white shadow-lg transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\r\n  </SliderPrimitive.Root>\r\n))\r\nSlider.displayName = SliderPrimitive.Root.displayName\r\n\r\nexport { Slider }\r\n","\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"../../lib/utils\"\r\n\r\nconst labelVariants = cva(\r\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n)\r\n\r\nconst Label = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\r\n    VariantProps<typeof labelVariants>\r\n>(({ className, ...props }, ref) => (\r\n  <LabelPrimitive.Root\r\n    ref={ref}\r\n    className={cn(labelVariants(), className)}\r\n    {...props}\r\n  />\r\n))\r\nLabel.displayName = LabelPrimitive.Root.displayName\r\n\r\nexport { Label }\r\n","\"use client\" // Next.jsでクライアントサイドで実行されることを示す\r\nimport React from 'react'\r\nimport { useState , useMemo ,useCallback } from 'react'\r\nimport { motion, useAnimationFrame } from 'framer-motion'\r\nimport { Slider } from \"../components/ui/slider\"\r\nimport { Label } from \"../components/ui/label\"\r\nimport { Card, CardContent } from \"../components/ui/card\"\r\nimport { Button } from \"../components/ui/button\"\r\n// WaveInterferenceCircularMotionコンポーネントを定義\r\nexport default function WaveInterferenceCircularMotion() {\r\n  // 各種パラメータをuseStateで管理\r\n  const [frequency1, setFrequency1] = useState(100) // 波1の周波数\r\n  const [frequency2, setFrequency2] = useState(100) // 波2の周波数\r\n  const [phase1, setPhase1] = useState(0) // 波1の位相\r\n  const [phase2, setPhase2] = useState(0) // 波2の位相\r\n  const [speed, setSpeed] = useState(1) // アニメーションの速度\r\n  const [scale, setScale] = useState(1) // 波のスケール（縮尺）\r\n  const [time, setTime] = useState(0) // アニメーションの時間経過を管理\r\n  const [isRunning, setIsRunning] = useState(true) // アニメーションのオン・オフを管理\r\n\r\n  // シミュレーションで用いる定数\r\n  const numPoints = 500 // 波のポイント数\r\n  const circleWidth = 400 // 円の表示領域の幅\r\n  const circleHeight = 400 // 円の表示領域の高さ\r\n  const waveWidth = 900 // 波の表示領域の幅\r\n  const waveHeight = 300 // 波の表示領域の高さ\r\n  const circleRadius = 60 // 円の半径\r\n\r\n  // アニメーションフレームごとに時間を更新（60 FPS想定）\r\n  useAnimationFrame(() => {\r\n    if (isRunning) {\r\n      setTime((prevTime) => prevTime + 0.00004 * speed) // 速度に応じて時間を進行\r\n    }\r\n  })\r\n\r\n  // 周波数と位相を元に波のポイントを生成する関数\r\n  const getWavePoints = useCallback((freq: number, phase: number) => {\r\n    return Array.from({ length: numPoints }, (_, i) => {\r\n      const x = (i / (numPoints - 1) - 0.5) * waveWidth // 波のX座標\r\n      const y = circleRadius * Math.sin(2 * Math.PI * freq * (x / waveWidth / scale / 10 - time) + phase * Math.PI / 180) // 波のY座標をサイン波で計算\r\n      return { x, y }\r\n    })\r\n  }, [scale, time])\r\n\r\n  // 円運動の座標を計算する関数をuseCallbackでメモ化\r\n  const getCirclePoint = useCallback((freq: number, phase: number) => {\r\n    const angle = -2 * Math.PI * freq * time + phase * Math.PI / 180 + Math.PI * 1.98 // 円運動の角度を計算\r\n    return {\r\n      x: circleRadius * Math.cos(angle), // X座標\r\n      y: circleRadius * Math.sin(angle)  // Y座標\r\n    }\r\n  }, [time])\r\n\r\n // 波や円のポイントをメモ化して計算を効率化\r\n const [wave1Points, wave2Points, combinedWavePoints, circle1Point, circle2Point, combinedCirclePoint] = useMemo(() => {\r\n  const w1 = getWavePoints(frequency1, phase1) // 波1のポイント\r\n  const w2 = getWavePoints(frequency2, phase2) // 波2のポイント\r\n  const cw = w1.map((p, i) => ({ x: p.x, y: p.y + w2[i].y })) // 波1と波2を合成\r\n  const c1 = getCirclePoint(frequency1, phase1) // 円1のポイント\r\n  const c2 = getCirclePoint(frequency2, phase2) // 円2のポイント\r\n  const cc = { x: c1.x + c2.x, y: c1.y + c2.y } // 円1と円2を合成\r\n  return [w1, w2, cw, c1, c2, cc]\r\n}, [frequency1, frequency2, phase1, phase2, getWavePoints, getCirclePoint]) \r\n\r\n  // 円を描画する関数（動きのある円を`motion.circle`で表現）\r\n  const renderCircle = (point: { x: number, y: number }, color: string, radius: number) => (\r\n    <motion.circle\r\n      cx={circleWidth / 2}\r\n      cy={circleHeight / 2}\r\n      r={radius} // 引数として受け取った半径を設定\r\n      fill={color}\r\n      animate={{ x: point.x, y: point.y }} // 円のアニメーションをX,Y座標に基づいて動かす\r\n      transition={{ duration: 0, ease: \"linear\" }} // アニメーションのトランジション\r\n    />\r\n  )\r\n  \r\n   // 波や円の色を取得する関数\r\n   const getColor = (index: number) => {\r\n    const colors = [\"#FF0000\", \"#0000FF\", \"#00FF00\"] // 色リスト（赤、青、緑）\r\n    return colors[index]\r\n  }\r\n\r\n  // 波を描画する関数（波のパスを描画）\r\n  const renderWave = (points: { x: number, y: number }[], color: string, radius:number) => (\r\n    <path\r\n      d={`M ${points.map(p => `${p.x + waveWidth *0.5},${p.y + waveHeight / 2}`).join(' L ')}`} // 波のパスを生成\r\n      fill=\"none\"\r\n      stroke={color} // 波の色\r\n      strokeWidth={radius} // 波の太さ\r\n    />\r\n  )\r\n  \r\n  // 波のポイントを描画する関数（動きのある波のポイント）\r\n  const renderWavePoint = (point: { x: number, y: number }, color: string, radius: number) => (\r\n    <motion.circle\r\n      cx={waveWidth / 2}\r\n      cy={waveHeight / 2}\r\n      r={radius} // ポイントの太さ\r\n      fill={color}\r\n      animate={{ x: point.x, y: point.y }} // 波のポイントをアニメーションで動かす\r\n      transition={{ duration: 0, ease: \"linear\" }} // トランジション\r\n    />\r\n  )\r\n\r\n  // コンポーネントのレンダリング部分\r\n  return (\r\n    <div className=\"p-4 max-w-full mx-auto\">\r\n    <h1 className=\"text-2xl font-bold mb-4\">波の干渉のシミュレーション（波の干渉、うなりの原理）</h1>\r\n    <div className=\"flex flex-col lg:flex-row mb-8 space-y-4 lg:space-y-0 lg:space-x-4\">\r\n      {/* 左の円の表示 */}\r\n      <div className=\"w-full lg:w-1/4 h-[300px] relative border border-gray-300 rounded\">\r\n        <svg width={circleWidth} height={circleHeight} className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\">\r\n          <circle cx={circleWidth / 2} cy={circleHeight / 2} r={circleRadius} stroke=\"rgba(0,0,0,0.1)\" strokeWidth=\"1\" fill=\"none\" />\r\n          <circle cx={circleWidth / 2} cy={circleHeight / 2} r={circleRadius * 2} stroke=\"rgba(0,0,0,0.1)\" strokeWidth=\"1\" fill=\"none\" />\r\n          <circle cx={circleWidth / 2} cy={circleHeight / 2} r=\"2\" fill=\"black\" />\r\n          {renderCircle(circle1Point, getColor(0),4)} {/* 赤色 */}\r\n          {renderCircle(circle2Point, getColor(1),3)} {/* 青色 */}\r\n          {renderCircle(combinedCirclePoint, getColor(2),6)} {/* 緑色 */}\r\n          <line x1={0} y1={circleWidth / 2 + combinedCirclePoint.y} x2={waveWidth} y2={circleWidth / 2 + combinedCirclePoint.y} stroke=\"rgba(0,0,0,0.3)\" strokeWidth=\"1\" strokeDasharray=\"5,5\" />\r\n          <line x1={circleWidth / 2} y1={circleHeight / 2} x2={circleWidth / 2 + combinedCirclePoint.x} y2={circleHeight / 2 + combinedCirclePoint.y} stroke=\"rgba(0,0,0,0.3)\" strokeWidth=\"1\" />\r\n        </svg>\r\n      </div>\r\n\r\n      {/* 右の波の表示 */}\r\n      <div className=\"w-full lg:w-3/4 h-[300px] relative border border-gray-300 rounded\">\r\n        <svg width={waveWidth} height={waveHeight} className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\">\r\n          <line x1={0} y1={waveHeight/2} x2={waveWidth} y2={waveHeight/2} stroke=\"rgba(0,0,0,0.1)\" strokeWidth=\"1\" />\r\n          <line x1={waveWidth/2} y1={0} x2={waveWidth/2} y2={waveHeight} stroke=\"rgba(0,0,0,0.1)\" strokeWidth=\"1\" />\r\n          {renderWave(wave1Points, getColor(0),1)} {/* 波1（赤色） */}\r\n          {renderWave(wave2Points, getColor(1),0.7)} {/* 波2（青色） */}\r\n          {renderWave(combinedWavePoints, getColor(2),2)} {/* 合成波（緑色） */}\r\n          {renderWavePoint({ x: wave1Points[249].x, y: wave1Points[249].y }, getColor(0),4)} {/* 波1のポイント */}\r\n          {renderWavePoint({ x: wave2Points[249].x, y: wave2Points[249].y}, getColor(1),3)} {/* 波2のポイント */}\r\n          {renderWavePoint({ x: combinedWavePoints[249].x, y: combinedWavePoints[249].y  }, getColor(2),6)} {/* 合成波のポイント */}\r\n          <line x1={0} y1={combinedWavePoints[249].y +waveHeight/2} x2={waveWidth} y2={combinedWavePoints[249].y +waveHeight/2} stroke=\"rgba(0,0,0,0.3)\" strokeWidth=\"1\" strokeDasharray=\"5,5\" />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n\r\n    {/* 各種パラメータを変更するUI部分 */}\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n      <Card>\r\n        <CardContent className=\"pt-6\">\r\n          <h2 className=\"text-lg font-semibold mb-4\">波1のパラメータ</h2>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label htmlFor=\"frequency1\">周波数: {frequency1} Hz</Label>\r\n              <Slider\r\n                id=\"frequency1\"\r\n                min={100}\r\n                max={300}\r\n                step={1}\r\n                value={[frequency1]}\r\n                onValueChange={([value]) => setFrequency1(value)} // 周波数を変更するスライダー\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"phase1\">位相: {phase1.toFixed(0)}°</Label>\r\n              <Slider\r\n                id=\"phase1\"\r\n                min={0}\r\n                max={360}\r\n                step={1}\r\n                value={[phase1]}\r\n                onValueChange={([value]) => setPhase1(value)} // 位相を変更するスライダー\r\n              />\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardContent className=\"pt-6\">\r\n          <h2 className=\"text-lg font-semibold mb-4\">波2のパラメータ</h2>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label htmlFor=\"frequency2\">周波数: {frequency2} Hz</Label>\r\n              <Slider\r\n                id=\"frequency2\"\r\n                min={100}\r\n                max={300}\r\n                step={1}\r\n                value={[frequency2]}\r\n                onValueChange={([value]) => setFrequency2(value)} // 波2の周波数\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"phase2\">位相: {phase2.toFixed(0)}°</Label>\r\n              <Slider\r\n                id=\"phase2\"\r\n                min={0}\r\n                max={360}\r\n                step={1}\r\n                value={[phase2]}\r\n                onValueChange={([value]) => setPhase2(value)} // 波2の位相\r\n              />\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card className=\"md:col-span-2\">\r\n        <CardContent className=\"pt-6\">\r\n          <h2 className=\"text-lg font-semibold mb-4\">全体のパラメータ</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"speed\">速さ: {speed.toFixed(2)}</Label>\r\n              <Slider\r\n                id=\"speed\"\r\n                min={0.5}\r\n                max={20}\r\n                step={0.1}\r\n                value={[speed]}\r\n                onValueChange={([value]) => setSpeed(value)} // アニメーションの速度\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"scale\">縮尺: {scale.toFixed(2)}x</Label>\r\n              <Slider\r\n                id=\"scale\"\r\n                min={0.1}\r\n                max={2}\r\n                step={0.01}\r\n                value={[scale]}\r\n                onValueChange={([value]) => setScale(value)} // 波の縮尺\r\n              />\r\n            </div>\r\n            <div className=\"flex items-end\">\r\n\r\n                         \r\n            <button \r\n            onClick={() => setIsRunning(!isRunning)} \r\n            className=\"px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition duration-150\"\r\n          >\r\n            {isRunning ? 'Stop' : 'Start'}\r\n          </button>\r\n          </div>    \r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n    <p>\r\n      説明：\r\n    </p>\r\n    <p>\r\n      ・同じ周波数の場合、位相によって波の干渉が変化します。\r\n    </p>\r\n    <p>\r\n      ・周波数が異なる場合、うなりの原理によって波の干渉が変化します。\r\n    </p>\r\n  </div>\r\n  )\r\n}\r\n"],"names":["Slider","React","_ref","ref","className","props","_jsxs","SliderPrimitive","cn","children","_jsx","displayName","labelVariants","cva","Label","LabelPrimitive","WaveInterferenceCircularMotion","frequency1","setFrequency1","useState","frequency2","setFrequency2","phase1","setPhase1","phase2","setPhase2","speed","setSpeed","scale","setScale","time","setTime","isRunning","setIsRunning","circleWidth","circleHeight","waveWidth","waveHeight","useAnimationFrame","prevTime","getWavePoints","useCallback","freq","phase","Array","from","length","_","i","x","y","Math","sin","PI","getCirclePoint","angle","cos","wave1Points","wave2Points","combinedWavePoints","circle1Point","circle2Point","combinedCirclePoint","useMemo","w1","w2","cw","map","p","c1","c2","cc","renderCircle","point","color","radius","motion","circle","cx","cy","r","fill","animate","transition","duration","ease","getColor","index","renderWave","points","d","join","stroke","strokeWidth","renderWavePoint","width","height","circleRadius","x1","y1","x2","y2","strokeDasharray","Card","CardContent","htmlFor","id","min","max","step","value","onValueChange","toFixed","_ref2","_ref3","_ref4","_ref5","_ref6","onClick"],"sourceRoot":""}