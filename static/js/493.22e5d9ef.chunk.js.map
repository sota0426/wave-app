{"version":3,"file":"static/js/493.22e5d9ef.chunk.js","mappings":"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","sources":["components/circular-motion-wave-simulation.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useState, useEffect, useRef } from 'react'\r\nimport { motion } from 'framer-motion'\r\nimport { InlineMath, BlockMath } from 'react-katex'\r\nimport 'katex/dist/katex.min.css'\r\n\r\n// メインコンポーネントの定義\r\nexport default function CircularMotionWaveSimulationComponent() {\r\n  // 状態変数の定義\r\n  const [period, setPeriod] = useState(4); // 周期（T）\r\n  const [radius, setRadius] = useState(60); // 半径（A）\r\n  const [numPoints, setNumPoints] = useState(24); // 点の数\r\n  const [time, setTime] = useState(0); // 現在の時間\r\n  const [isRunning, setIsRunning] = useState(true); // アニメーションのオン/オフ\r\n  const [selectedPoint, setSelectedPoint] = useState<number | null>(null); // 選択された点\r\n  const [modeState, setModeState] = useState<\"\" | \"compare\" | \"rainbow\" | \"simplePosition\" | \"simpleVelocity\" | \"simpleAcceleration\">(\"compare\"); // モード状態\r\n  const [svgSize, setSvgSize] = useState(0); // SVGのサイズ\r\n  const [thetaDeg, setThetaDeg] = useState(\"0\"); // 角度\r\n  const [rotationAngle, setRotationAngle] = useState(90); // 回転角度\r\n  const circularMotionRef = useRef<HTMLDivElement>(null); // コンポーネントの参照\r\n  const [plottedPoints, setPlottedPoints] = useState<{ time: number; value: number }[]>([]); // プロットされたデータ\r\n  const prevTimeRef = useRef(time); // 前の時間の参照\r\n\r\n\r\n  // サイズの更新用Effect\r\n  useEffect(() => {\r\n    // 現在の表示領域のサイズを基に、SVGのサイズと円の半径を更新する関数\r\n    const updateSize = () => {\r\n      // circularMotionRef.currentが存在する場合にのみ処理を続行\r\n      if (circularMotionRef.current) {\r\n        // 現在の表示領域の幅（offsetWidth）を取得\r\n        const width = circularMotionRef.current.offsetWidth;\r\n        // SVGのサイズを現在の幅に設定\r\n        setSvgSize(width);\r\n        // 円の半径を表示領域の幅の40%に設定\r\n        setRadius(width * 0.4);\r\n      }\r\n    };\r\n\r\n    // 初回レンダリング時に即座にサイズを更新\r\n    updateSize();\r\n\r\n    // ウィンドウのリサイズイベントを監視し、サイズを再計算\r\n    window.addEventListener('resize', updateSize);\r\n\r\n    // コンポーネントがアンマウントされる際に、リサイズイベントリスナーを削除\r\n    return () => window.removeEventListener('resize', updateSize);\r\n  }, []); // 空の依存配列により、このEffectは初回レンダリング時にのみ実行される\r\n\r\n\r\n\r\n  // タイマーの処理\r\n  useEffect(() => {\r\n    let timer: NodeJS.Timeout;\r\n    if (isRunning) {\r\n      timer = setInterval(() => {\r\n        setTime((t) => (t + 0.02) % (3 * period));\r\n      }, 50);\r\n    }\r\n    return () => clearInterval(timer);\r\n  }, [isRunning, period]);\r\n\r\n\r\n  // 座標回転処理\r\n  const getRotatedCoordinates = (x: number, y: number, angle: number) => {\r\n    const radians = (angle * Math.PI) / 180;\r\n    return { x: x * Math.cos(radians), y: y };\r\n  };\r\n\r\n  const getAngleCoordinates = (angle: number, radius: number) => {\r\n    const x = radius * Math.cos(angle)\r\n    const y = radius * Math.sin(angle)\r\n    return { x, y }\r\n  }\r\n\r\n  const getPhaseDifference = () => {\r\n    if (selectedPoint === null) return 0;\r\n    return ((selectedPoint / numPoints) * 2 * Math.PI ) % ( 2* Math.PI);\r\n  }\r\n\r\n  const getColor = (index: number) => {\r\n    if (modeState === 'compare') {\r\n      if (index === 0) return '#FF4136' // より鮮やかな赤\r\n      if (index === selectedPoint) return '#0074D9' // より鮮やかな青\r\n      return '#AAAAAA' // より明るいグレー\r\n    } else if (modeState === 'rainbow') {\r\n      const hue = (index / numPoints) * 360\r\n      return `hsl(${hue}, 100%, 45%)` // 彩度を下げて少し暗く\r\n    } else if (modeState === \"simpleAcceleration\" || modeState ===\"simplePosition\" || modeState===\"simpleVelocity\") {\r\n      if (index === 0) return '#FF4136' // より鮮やかな赤\r\n      return '#AAAAAA' // より明るいグレー // 単振動モードでは赤色\r\n    }\r\n  }\r\n\r\n  const getPointSize = (index: number , start : boolean) => {\r\n    if (modeState === 'compare') {\r\n      if (index === 0 && start === true) return 9 // 赤色の点を1.5倍に\r\n      if (index === selectedPoint && start === true) return 9 // 選択された点も大きく\r\n      return 1.5 // その他の点は小さく\r\n    } else if (modeState === 'rainbow') {\r\n      const size = 9 - (index / numPoints) * 6 // 9から3の間で変化\r\n      return Math.max(size, 3) // 最小サイズを3に設定\r\n    } else if (modeState === \"simpleAcceleration\" || modeState ===\"simplePosition\" || modeState===\"simpleVelocity\"){\r\n      if (index === 0 && start === true) return 9 \r\n      return 0 // 単振動モードでは固定サイズ\r\n    }\r\n  }\r\n\r\n\r\n  const togglePoint = (index: number) => {\r\n    if (modeState !== 'compare' || index === 0) return\r\n    setSelectedPoint(prev => prev === index ? null : index)\r\n  }\r\n\r\n  const timeInPeriodFraction = () => {\r\n    const fraction_1 = Math.floor((time / period))\r\n    const fraction_2 = Math.floor(((time / period)  * 8) % 8)\r\n\r\n    return `\\\\left(=${fraction_1} T+ \\\\frac{${fraction_2}}{8} T\\\\right)`\r\n  }\r\n\r\n  useEffect(() => {\r\n    const thetaRad = 2 * (time / period)\r\n    const newThetaDeg = (thetaRad * 180 % 360).toFixed(0)\r\n    setThetaDeg(newThetaDeg)\r\n  }, [time, period])\r\n\r\n  const thetaInRadAndDeg = () => {\r\n    const thetaRad = 2 * ((time % period) / period) \r\n    return `${thetaRad.toFixed(1)} \\\\pi`\r\n  }\r\n\r\n  const thetaEquation = () => {\r\n    return `\\\\theta = 2\\\\pi \\\\times \\\\frac{t}{T} \\\\quad ⇔\\\\quad \\\\theta =2\\\\pi \\\\times \\\\frac{${(time % period).toFixed(1)}}{${period.toFixed(1)}} = ${thetaInRadAndDeg()}[rad](${thetaDeg}°)`\r\n  }\r\n  \r\n  const displacementEquation = (isBlue = false) => {\r\n    const omega = `2\\\\pi\\\\frac{t}{T}`\r\n    const phaseDiff = isBlue ? `2\\\\pi\\\\frac{x}{\\\\lambda}` : ''\r\n    const numericOmega = `${((time / period * 2) % period).toFixed(1)}π`\r\n    const numericPhaseDiff = isBlue ? ((selectedPoint ?? 0) / numPoints * 2).toFixed(1) : '0';\r\n    return `y = A \\\\sin(${omega} ${isBlue ? `-${phaseDiff}` : ''}) \r\n    \\\\quad ⇔\\\\quad y=${radius.toFixed(0)} \\\\sin(${numericOmega} ${isBlue ? `-Δθ` : ''}) `\r\n  }\r\n\r\n  // 点の計算\r\n  const calculatePoints = (numPoints: number, time: number, period: number, radius: number, rotationAngle: number, offsetPeriod: number) => {\r\n    return Array.from({ length: numPoints }, (_, i) => {\r\n      const delay = (i / numPoints) * period;\r\n      const effectiveTime = time > delay + offsetPeriod ? time - delay : 0;\r\n      const angle = effectiveTime > 0 ? -(effectiveTime / period) * 2 * Math.PI : 0;\r\n      const x = radius * Math.cos(angle);\r\n      const y = radius * Math.sin(angle);\r\n      const rotated = getRotatedCoordinates(x, y, rotationAngle);\r\n      return { x: rotated.x, y: rotated.y, angle };\r\n    });\r\n  };\r\n\r\n  // points1 と points2 を計算\r\n  const points1 = calculatePoints(numPoints, time, period, radius, rotationAngle, 0);\r\n  const points2 = calculatePoints(numPoints, time, period, radius, rotationAngle, period);\r\n\r\n  // 単振動モードのための速度と加速度の計算\r\n  const calculateVelocityAndAcceleration = () => {\r\n    const omega = (2 * Math.PI) / period;\r\n    const angle = -(time / period) * 2 * Math.PI;\r\n    const v_x = omega * radius * Math.sin(angle);\r\n    const v_y = omega * radius * Math.cos(angle);\r\n    const a_x = -omega * omega * radius * Math.cos(angle);\r\n    const a_y = -omega * omega * radius * Math.sin(angle);\r\n\r\n    const rotatedVelocity = getRotatedCoordinates(v_x, v_y, rotationAngle);\r\n    const rotatedAcceleration = getRotatedCoordinates(a_x, a_y, rotationAngle);\r\n\r\n    return { velocity: rotatedVelocity, acceleration: rotatedAcceleration };\r\n  };\r\n\r\n  // 速度と加速度のベクトルを取得\r\n  const { velocity, acceleration } = calculateVelocityAndAcceleration();\r\n\r\n  // 最大値の計算（グラフのスケーリングに使用）\r\n  const omega = (2 * Math.PI) / period;\r\n\r\n\r\n\r\n  // 現在の値の計算\r\n  const currentValue = (() => {\r\n    if (modeState === \"simplePosition\") {\r\n      return points1[0].y;\r\n    } else if (modeState === \"simpleVelocity\") {\r\n      return velocity.y;\r\n    } else if (modeState === \"simpleAcceleration\") {\r\n      return acceleration.y;\r\n    } else {\r\n      return 0;\r\n    }\r\n  })();\r\n\r\n  // プロットされた点を更新\r\n  useEffect(() => {\r\n    if (time < prevTimeRef.current) {\r\n      // 時間がリセットされた場合、プロットされた点をリセット\r\n      setPlottedPoints([]);\r\n    }\r\n    prevTimeRef.current = time;\r\n\r\n    const interval = period / 32;\r\n    const numIntervals = Math.floor((time + 0.0001) / interval);\r\n\r\n    if (numIntervals > plottedPoints.length) {\r\n      let value:number;\r\n      if (modeState === \"simplePosition\") {\r\n        value = points1[0].y;\r\n      } else if (modeState === \"simpleVelocity\") {\r\n        value = velocity.y;\r\n      } else if (modeState === \"simpleAcceleration\") {\r\n        value = acceleration.y;\r\n      }\r\n\r\n      setPlottedPoints(prev => [...prev, { time, value }]);\r\n    }\r\n  }, [time, period, plottedPoints.length, modeState, points1, velocity, acceleration]);\r\n\r\n  // プロットする点を計算\r\n  const maxValue = (() => {\r\n    if (modeState === \"simplePosition\") {\r\n      return radius;\r\n    } else if (modeState === \"simpleVelocity\") {\r\n      return - omega * radius;\r\n    } else if (modeState === \"simpleAcceleration\") {\r\n      return omega * omega * radius;\r\n    } else {\r\n      return 1; // デフォルト値\r\n    }\r\n  })();\r\n  \r\n  const plotPoints = plottedPoints.map(point => {\r\n    const x = 5 + (point.time / (3 * period)) * 90;\r\n    let y : number\r\n    if (modeState === \"simplePosition\") {\r\n     y = 50 + (point.value / Math.abs(maxValue)) * radius / svgSize * 100;\r\n    }else{\r\n     y = 50 + (point.value / Math.abs(maxValue)) * maxValue * 0.2 / svgSize * 100;     \r\n    }\r\n    return { x, y };\r\n  });\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"p-4 max-w-4xl mx-auto bg-gradient-to-br from-gray-50 to-gray-100 text-gray-800\">\r\n      <h1 className=\"text-2xl font-bold mb-4 text-gray-900\">単振動と波動のシミュレーション</h1>\r\n\r\n      {/* モードを選択するコンテナ */}\r\n      <div className=\"flex items-center space-x-2 mt-1 bg-white p-4 rounded-lg shadow\">\r\n        <label className=\"flex items-center ml-4\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"mode\"\r\n            value=\"simpleVibration\"\r\n            checked={modeState === \"simplePosition\"}\r\n            onChange={() => {\r\n              setModeState(\"simplePosition\");\r\n              setSelectedPoint(null);\r\n              setTime(0)\r\n              setPlottedPoints([]); // プロットをリセット\r\n            }}\r\n            className=\"mr-2 accent-indigo-600\"\r\n          />\r\n          <span className=\"text-gray-700\">単振動モード　</span>\r\n        </label>\r\n\r\n        <label className=\"flex items-center\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"mode\"\r\n            value=\"compare\"\r\n            checked={modeState === 'compare'}\r\n            onChange={() => {\r\n              setModeState('compare');\r\n              setSelectedPoint(null);\r\n              setTime(0)\r\n              setPlottedPoints([]); // プロットをリセット\r\n            }}\r\n            className=\"mr-2 accent-indigo-600\"\r\n          />\r\n          <span className=\"text-gray-700\">位相比較モード　</span>\r\n        </label>\r\n\r\n        <label className=\"flex items-center ml-4\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"mode\"\r\n            value=\"rainbow\"\r\n            checked={modeState === 'rainbow'}\r\n            onChange={() => {\r\n              setModeState('rainbow');\r\n              setSelectedPoint(null);\r\n              setTime(0)\r\n              setPlottedPoints([]); // プロットをリセット\r\n            }}\r\n            className=\"mr-2 accent-indigo-600\"\r\n          />\r\n          <span className=\"text-gray-700\">虹色モード　</span>\r\n        </label>\r\n      </div>\r\n      <br />\r\n\r\n      {/* 単振動モードのときにのみ表示されるチェックボックス */}\r\n      {(modeState === \"simpleAcceleration\" || modeState ===\"simplePosition\" || modeState===\"simpleVelocity\") && (\r\n        <div className=\"flex items-center space-x-4 mb-4 bg-white p-4 rounded-lg shadow\">\r\n          <label className=\"flex items-center\">\r\n            <input\r\n              type=\"radio\"\r\n              checked={modeState===\"simplePosition\"}\r\n              onChange={() => {\r\n                setModeState(\"simplePosition\");\r\n                setTime(0);\r\n                setPlottedPoints([]); // プロットをリセット\r\n              }}\r\n              className=\"mr-2 accent-indigo-600\"\r\n            />\r\n            <span className=\"text-gray-700\">変位を表示</span>\r\n          </label>        \r\n          <label className=\"flex items-center\">\r\n            <input\r\n              type=\"radio\"\r\n              checked={modeState===\"simpleVelocity\"}\r\n              onChange={() => {\r\n                setModeState(\"simpleVelocity\");\r\n                setTime(0);\r\n                setPlottedPoints([]); // プロットをリセット\r\n              }}\r\n              className=\"mr-2 accent-indigo-600\"\r\n            />\r\n            <span className=\"text-gray-700\">速度ベクトルを表示</span>\r\n          </label>\r\n          <label className=\"flex items-center\">\r\n            <input\r\n              type=\"radio\"\r\n              checked={modeState===\"simpleAcceleration\"}\r\n              onChange={() => {\r\n                setModeState(\"simpleAcceleration\");\r\n                setTime(0);\r\n                setPlottedPoints([]); // プロットをリセット\r\n              }}\r\n              className=\"mr-2 accent-indigo-600\"\r\n            />\r\n            <span className=\"text-gray-700\">加速度ベクトルを表示</span>\r\n          </label>\r\n\r\n        </div>\r\n      )}\r\n\r\n     {/* 位相比較モードにおいて、位相比較コンテナ */}\r\n     {modeState === 'compare' && (\r\n        <div className=\"flex items-center space-x-4 mb-4 bg-white p-4 rounded-lg shadow-md\">\r\n         <div className=\" font-bold mb-1 text-gray-700\">位相比較モード</div>\r\n          <div className=\"grid sm:grid-cols-5 md:grid-cols-8 gap-4\">\r\n            {Array.from({ length: numPoints }).map((_, i) => (\r\n              i !== 0 &&  i % 4 === 0 && (\r\n                <div key={i} className=\"flex items-center\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={`point-${i}`}\r\n                    checked={selectedPoint === i}\r\n                    onChange={() => togglePoint(i)}\r\n                    className=\"mr-2 accent-indigo-600\"\r\n                  />\r\n                  <label htmlFor={`point-${i}`} className={`${i === selectedPoint ? 'text-blue-600' : 'text-gray-600'} cursor-pointer`}>\r\n                    {(i/numPoints * 360).toFixed(0)}°\r\n                  </label>\r\n                </div>\r\n              )\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n\r\n        {/* グラフコンテナ */}\r\n      <div className=\"flex flex-col md:flex-row  md:space-x-6\">\r\n\r\n        {/* 左の円運動のグラフ */}\r\n        <div ref={circularMotionRef} className=\"w-full md:w-1/2 aspect-square relative border border-gray-300 rounded-lg shadow-md bg-white\">\r\n          <svg className=\"w-full h-full\">\r\n            <ellipse \r\n              cx=\"50%\" \r\n              cy=\"50%\" \r\n              rx={`${(radius * Math.cos(rotationAngle * Math.PI / 180)) / svgSize * 100}%`} \r\n              ry={`${radius / svgSize * 100}%`} \r\n              stroke=\"rgba(0,0,0,0.1)\" \r\n              strokeWidth=\"1\" \r\n              fill=\"none\" \r\n            />\r\n            \r\n            {/* 赤色の水平線 */}\r\n            { !(modeState === \"simpleAcceleration\" || modeState ===\"simpleVelocity\") && (\r\n            <line \r\n              x1=\"0\" \r\n              y1={`calc(50% + ${(points1[0].y / svgSize * 100)}%)`} \r\n              x2=\"100%\" \r\n              y2={`calc(50% + ${(points1[0].y / svgSize * 100)}%)`} \r\n              stroke=\"#FF4136\" \r\n              strokeWidth=\"1\" \r\n              strokeDasharray=\"2 4\" \r\n            />\r\n          )}\r\n            {modeState === 'compare' && selectedPoint !== null && (\r\n              <line \r\n                x1=\"0\" \r\n                y1={`calc(50% + ${(points1[selectedPoint].y / svgSize * 100)}%)`} \r\n                x2=\"100%\" \r\n                y2={`calc(50% + ${(points1[selectedPoint].y / svgSize * 100)}%)`} \r\n                stroke=\"#0074D9\" \r\n                strokeWidth=\"1\" \r\n                strokeDasharray=\"2 4\" \r\n              />\r\n            )}\r\n            {points1.map((point, i) => (\r\n              <g key={i}>\r\n                {(i === 0 || i === selectedPoint) && (\r\n                  <line\r\n                    x1=\"50%\"\r\n                    y1=\"50%\"\r\n                    x2={`${50 + (point.x / svgSize * 100)}%`}\r\n                    y2={`${50 + (point.y / svgSize * 100)}%`}\r\n                    stroke={getColor(i)}\r\n                    strokeWidth={i === 0 ? \"1\" : \"0.5\"}\r\n                  />\r\n                )}\r\n                <circle\r\n                  cx={`${50 + (point.x / svgSize * 100)}%`}\r\n                  cy={`${50 + (point.y / svgSize * 100)}%`}\r\n                  r={getPointSize(i ,true)}\r\n                  fill={getColor(i)}\r\n                  onClick={() => togglePoint(i)}\r\n                  style={{ cursor: 'pointer' }}\r\n                />\r\n              </g>\r\n            ))}\r\n\r\n\r\n\r\n            {/* 赤色の角度表示 (0度の時のみ) */}\r\n            {rotationAngle === 0 && (\r\n              <path\r\n                d={`\r\n                  M ${svgSize / 2} ${svgSize / 2} \r\n                  L ${svgSize / 2 + radius / 10} ${svgSize / 2} \r\n                  A ${radius/10} ${radius/10} 0 \r\n                  ${((time / period) * 2 * Math.PI) % ( 2 * Math.PI) > Math.PI ? 1 : 0}  \r\n                  0 \r\n                  ${svgSize / 2 + getAngleCoordinates(2 * Math.PI - ((time / period) * 2 * Math.PI) % (2 * Math.PI) , radius/10).x} \r\n                  ${svgSize / 2 + getAngleCoordinates(2 * Math.PI - ((time / period) * 2 * Math.PI) % (2 * Math.PI), radius/10).y}\r\n                `}\r\n                fill=\"rgba(255, 65, 54, 0.2)\"\r\n                stroke=\"#FF4136\"\r\n                strokeWidth=\"2\"\r\n              />\r\n            )}\r\n            \r\n            {/* 赤色のθ表示 */}\r\n            {rotationAngle === 0   && (\r\n              <text\r\n                x={svgSize / 1.75}\r\n                y={svgSize / 1.8}\r\n                fontSize=\"16\"\r\n                fill=\"#FF4136\"\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"middle\"\r\n              >\r\n                θ= {thetaDeg}°\r\n              </text>\r\n            )}\r\n\r\n\r\n            {/* 青い点と赤い点を結ぶ扇形の円弧（位相差） */}\r\n            {rotationAngle === 0 && modeState === 'compare' && selectedPoint !== null && (\r\n              <>\r\n                <path\r\n                  d={`\r\n                    M ${svgSize / 2} ${svgSize / 2} \r\n                    L ${svgSize / 2 + getAngleCoordinates(-(time / period) * 2 * Math.PI, radius).x} \r\n                      ${svgSize / 2 + getAngleCoordinates(-(time / period) * 2 * Math.PI, radius).y} \r\n                    A ${radius} ${radius} 0 \r\n                    ${(getPhaseDifference()) > Math.PI ? 1 : 0} \r\n                    1 \r\n                    ${svgSize / 2 + getAngleCoordinates((-(time / period) + (selectedPoint / numPoints)) * 2 * Math.PI, radius).x} \r\n                    ${svgSize / 2 + getAngleCoordinates((-(time / period) + (selectedPoint / numPoints)) * 2 * Math.PI, radius).y}\r\n                    Z \r\n                  `}\r\n                  fill=\"rgba(0, 116, 217, 0.1)\"  // 薄い青色で扇形を塗る\r\n                  stroke=\"#0074D9\"\r\n                  strokeWidth=\"2\"\r\n                />\r\n                \r\n                {/* 青色の位相差表示 */}\r\n                <text\r\n                  x={svgSize / 2 + getAngleCoordinates(-(time / period - selectedPoint / numPoints / 2) * 2 * Math.PI, radius * 2 / 3).x}\r\n                  y={svgSize / 2 + getAngleCoordinates(-(time / period - selectedPoint / numPoints / 2) * 2 * Math.PI, radius *2 / 3).y}\r\n                  fontSize=\"16\"\r\n                  fill=\"#0074D9\"\r\n                  textAnchor=\"middle\"\r\n                  dominantBaseline=\"middle\"\r\n                >\r\n                  Δθ = {(getPhaseDifference() * 180 / Math.PI).toFixed(0)}°\r\n                </text>\r\n              </>\r\n            )}\r\n\r\n\r\n\r\n            {/* 単振動モードで速度と加速度のベクトルを表示 */}\r\n            {(modeState === \"simpleAcceleration\" || modeState ===\"simplePosition\" || modeState===\"simpleVelocity\") && (\r\n              <>\r\n                {/* 速度ベクトル */}\r\n                {modeState===\"simpleVelocity\" && (\r\n                  <line\r\n                    x1={`${50 + (points1[0].x / svgSize * 100)}%`}\r\n                    y1={`${50 + (points1[0].y / svgSize * 100)}%`}\r\n                    x2={`${50 + ((points1[0].x + velocity.x * 0.2) / svgSize * 100)}%`}\r\n                    y2={`${50 + ((points1[0].y - velocity.y * 0.2) / svgSize * 100)}%`}\r\n                    stroke=\"green\"\r\n                    strokeWidth=\"1.5\"\r\n                    markerEnd=\"url(#arrowhead)\"\r\n                  />\r\n                )}\r\n\r\n\r\n                {/* 加速度ベクトル */}\r\n                {modeState===\"simpleAcceleration\" && (\r\n                  <line\r\n                    x1={`${50 + (points1[0].x / svgSize * 100)}%`}\r\n                    y1={`${50 + (points1[0].y / svgSize * 100)}%`}\r\n                    x2={`${50 + ((points1[0].x + acceleration.x * 0.2) / svgSize * 100)}%`}\r\n                    y2={`${50 + ((points1[0].y + acceleration.y * 0.2) / svgSize * 100)}%`}\r\n                    stroke=\"blue\"\r\n                    strokeWidth=\"1.5\"\r\n                    markerEnd=\"url(#arrowhead)\"\r\n                  />\r\n                )}\r\n\r\n\r\n\r\n                {/* 矢印の定義 */}\r\n                <defs>\r\n                  <marker\r\n                    id=\"arrowhead\"\r\n                    markerWidth=\"10\"\r\n                    markerHeight=\"7\"\r\n                    refX=\"0\"\r\n                    refY=\"3.5\"\r\n                    orient=\"auto\"\r\n                  >\r\n                    <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"currentColor\" />\r\n                  </marker>\r\n                </defs>\r\n              </>\r\n            )}\r\n          </svg>          \r\n        </div> \r\n\r\n        {/* 右グラフ：単振動モードのグラフ表示 */}\r\n        {(modeState ===\"simplePosition\" ||  modeState===\"simpleVelocity\"|| modeState === \"simpleAcceleration\")  && (\r\n          <div className=\"w-full md:w-1/2 aspect-square relative border border-gray-300 rounded-lg shadow-md bg-white\">\r\n            <svg className=\"w-full h-full\">\r\n              {/* グラフの縦軸と横軸 */}\r\n                {/* 横軸 */}\r\n                <line \r\n                  x1=\"5%\" \r\n                  y1=\"50%\" \r\n                  x2=\"95%\" \r\n                  y2=\"50%\" \r\n                  stroke=\"black\" \r\n                  strokeWidth=\"1\" \r\n                />\r\n\r\n                {/* 縦軸 */}\r\n                <line \r\n                  x1=\"5%\" \r\n                  y1=\"5%\" \r\n                  x2=\"5%\" \r\n                  y2=\"95%\" \r\n                  stroke=\"black\" \r\n                  strokeWidth=\"1\" \r\n                />\r\n            {/* 赤色の水平線 */}\r\n            { !(modeState === \"simpleAcceleration\" || modeState ===\"simpleVelocity\") && (\r\n            <line \r\n              x1=\"0\" \r\n              y1={`calc(50% + ${(points1[0].y / svgSize * 100)}%)`} \r\n              x2=\"100%\" \r\n              y2={`calc(50% + ${(points1[0].y / svgSize * 100)}%)`} \r\n              stroke=\"#FF4136\" \r\n              strokeWidth=\"1\" \r\n              strokeDasharray=\"2 4\" \r\n            />\r\n          )}\r\n                {/* 横軸の目盛り */}\r\n                {Array.from({ length: 5 }).map((_, i) => (\r\n                  <line \r\n                    key={i}\r\n                    x1={`${5 + (i * 30)}%`}  // 目盛りを等間隔で配置\r\n                    y1=\"48%\"\r\n                    x2={`${5 + (i * 30)}%`}\r\n                    y2=\"52%\"\r\n                    stroke=\"black\"\r\n                    strokeWidth=\"1\"\r\n                  />\r\n                ))}\r\n\r\n                {/* 縦軸の目盛り */}\r\n                {Array.from({ length: 5 }).map((_, i) => (\r\n                  <line \r\n                    key={i}\r\n                    x1=\"4.5%\"\r\n                    y1={`${5 + (i * 22.5)}%`}  // 目盛りを等間隔で配置\r\n                    x2=\"5.5%\"\r\n                    y2={`${5 + (i * 22.5)}%`}\r\n                    stroke=\"black\"\r\n                    strokeWidth=\"1\"\r\n                  />\r\n                ))}\r\n\r\n\r\n\r\n              {/* 変位のグラフ*/}\r\n              {modeState === \"simplePosition\" && (\r\n                <circle\r\n                  cx={`${5 + (time / (3 * period)) * 90}%`}  // 5%から始まり、95%まで移動\r\n                  cy={`${50 + (currentValue / maxValue) *  radius / svgSize * 100}%`}\r\n                  r={getPointSize(0, true)}\r\n                  fill={getColor(0)}\r\n                  onClick={() => togglePoint(0)}\r\n                  style={{ cursor: 'pointer' }}\r\n                />\r\n              )}\r\n              {modeState === \"simplePosition\" && \r\n              plotPoints.map((point, index) => (\r\n                <circle\r\n                  key={index}\r\n                  cx={`${point.x}%`}\r\n                  cy={`${point.y}%`}\r\n                  r={2}\r\n                  fill=\"red\"\r\n                />\r\n              ))}\r\n\r\n\r\n\r\n              {/* 速度のグラフ*/}\r\n              {modeState === \"simpleVelocity\" && (\r\n                <line\r\n                  x1={`${5 + (time / (3 * period)) * 90}%`} \r\n                  y1=\"50%\"\r\n                  x2={`${5 + (time / (3 * period)) * 90}%`} \r\n                  y2={`${50 - ( velocity.y * 0.2) / svgSize * 100}%`}\r\n                  stroke=\"green\"\r\n                  strokeWidth=\"1.5\"\r\n                  markerEnd=\"url(#arrowhead)\"\r\n                />\r\n              )}\r\n                {modeState ===\"simpleVelocity\" && \r\n                  plotPoints.map((point, index) => (\r\n                    <circle\r\n                      key={index}\r\n                      cx={`${point.x}%`}\r\n                      cy={`${point.y}%`}\r\n                      r={2}\r\n                      fill=\"green\"\r\n                    />\r\n                  ))}\r\n\r\n\r\n              {/* 加速度のグラフ*/}\r\n            {modeState === \"simpleAcceleration\" && (\r\n                <line\r\n                  x1={`${5 + (time / (3 * period)) * 90}%`} \r\n                  y1=\"50%\"\r\n                  x2={`${5 + (time / (3 * period)) * 90}%`} \r\n                  y2={`${50 + ( acceleration.y * 0.2) / svgSize * 100}%`}\r\n                  stroke=\"blue\"\r\n                  strokeWidth=\"1.5\"\r\n                  markerEnd=\"url(#arrowhead)\"\r\n                />\r\n              )}\r\n                {modeState ===\"simpleAcceleration\" && \r\n                  plotPoints.map((point, index) => (\r\n                    <circle\r\n                      key={index}\r\n                      cx={`${point.x}%`}\r\n                      cy={`${point.y}%`}\r\n                      r={2}\r\n                      fill=\"blue\"\r\n                    />\r\n                  ))}\r\n              \r\n\r\n              {/* 矢印の定義 */}\r\n              <defs>\r\n                <marker\r\n                  id=\"arrowhead\"\r\n                  markerWidth=\"10\"\r\n                  markerHeight=\"7\"\r\n                  refX=\"0\"\r\n                  refY=\"3.5\"\r\n                  orient=\"auto\"\r\n                >\r\n                  <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"currentColor\" />\r\n                </marker>\r\n              </defs>\r\n            </svg>\r\n            <div className=\"absolute bottom-0 left-0 w-full h-6 flex justify-between px-2 text-gray-600\">\r\n              {Array.from({ length: 4 }).map((_, i) => (\r\n                <div key={i} className=\"text-xs\">{(i * (3 * period) / 3).toFixed(1)}s</div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* 右グラフ：位相比較モードや虹色モードのグラフ表示 */}\r\n        {(modeState === \"compare\" || modeState ===\"rainbow\") && (\r\n          <div className=\"w-full md:w-1/2 aspect-square relative border border-gray-300 rounded-lg shadow-md bg-white\">\r\n            <svg className=\"w-full h-full\">\r\n              {/* 赤色水平線*/}\r\n              \r\n              <line \r\n                x1=\"0\" \r\n                y1={`calc(50% + ${(points1[0].y / svgSize * 100)}%)`} \r\n                x2=\"100%\" \r\n                y2={`calc(50% + ${(points1[0].y / svgSize * 100)}%)`} \r\n                stroke=\"#FF4136\" \r\n                strokeWidth=\"1\" \r\n                strokeDasharray=\"2 4\" \r\n              />\r\n              {modeState === 'compare' && selectedPoint !== null && (\r\n                <line \r\n                  x1=\"0\" \r\n                  y1={`calc(50% + ${(points1[selectedPoint].y / svgSize * 100)}%)`} \r\n                  x2=\"100%\" \r\n                  y2={`calc(50% + ${(points1[selectedPoint].y / svgSize * 100)}%)`} \r\n                  stroke=\"#0074D9\" \r\n                  strokeWidth=\"1\" \r\n                  strokeDasharray=\"2 4\" \r\n                />\r\n              )}\r\n\r\n              {points1.map((point, i) => (\r\n                <circle\r\n                  key={`1-${i}`}\r\n                  cx={`${3 +(i / numPoints) * 50}%`}\r\n                  cy={`${50 + (point.y / svgSize * 100)}%`}\r\n                  r={getPointSize(i , true)}\r\n                  fill={getColor(i)}\r\n                />\r\n              ))}\r\n              {points2.map((point, i) => (\r\n                <circle\r\n                  key={`2-${i}`}\r\n                  cx={`${53 +(i / numPoints) * 50}%`}\r\n                  cy={`${50 + (point.y / svgSize * 100)}%`}\r\n                  r={getPointSize(i , false)}\r\n                  fill={getColor(i)}\r\n                />\r\n              ))}\r\n            </svg>\r\n            <div className=\"absolute bottom-0 left-0 w-full h-6 flex justify-between px-2 text-gray-600\">\r\n              {Array.from({ length: 5 }).map((_, i) => (\r\n                <div key={i} className=\"text-xs\">{i * (numPoints / 4)}</div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n\r\n     {/* それぞれの設定コンテナ */}\r\n\r\n\r\n      <div className=\"flex flex-wrap m-6 p-4 bg-white shadow rounded items-center space-x-4 space-y-2 mb-6\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <label className=\"text-gray-700\">周期 : T= {period.toFixed(1)}  </label>\r\n          <button onClick={() => setPeriod(p => Math.min(p + 0.5, 10))} className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-150\">+</button>\r\n          <button onClick={() => setPeriod(p => Math.max(p - 0.5, 1))} className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition duration-150\">-</button>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <label className=\"text-gray-700\">半径 : A= {radius.toFixed(0)}</label>\r\n          <button onClick={() => setRadius(r => Math.min(r + 5, svgSize * 0.45))} className=\"px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 transition duration-150\">+</button>\r\n          <button onClick={() => setRadius(r => Math.max(r - 5, 20))} className=\"px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 transition duration-150\">-</button>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <label className=\"text-gray-700\">点の数: {numPoints}</label>\r\n          <button onClick={() => setNumPoints(n => Math.min(n + 8, 80))} className=\"px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 transition duration-150\">+</button>\r\n          <button onClick={() => setNumPoints(n => Math.max(n - 8, 8))} className=\"px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600 transition duration-150\">-</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex flex-wrap m-6 p-4 bg-white shadow rounded items-center space-x-4 space-y-2 mb-6\">\r\n     <div className=\"flex items-center space-x-2\">\r\n          <br />\r\n          <label className=\"text-gray-700\">回転角度: {rotationAngle}°</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"90\"\r\n            value={rotationAngle}\r\n            onChange={(e) => setRotationAngle(Number(e.target.value))}\r\n            className=\"w-64 accent-indigo-600\"\r\n          />\r\n        </div>\r\n        </div>\r\n\r\n\r\n      <div className=\"space-y-4 bg-white p-4 rounded-lg shadow\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <button\r\n            onClick={()=>{\r\n              setTime(0);\r\n              setPlottedPoints([]); // プロットをリセット\r\n            }}\r\n            className=\"px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition duration-150\"           \r\n          >\r\n            Reset\r\n          </button>\r\n          <button \r\n            onClick={() => setIsRunning(!isRunning)} \r\n            className=\"px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition duration-150\"\r\n          >\r\n            {isRunning ? 'Stop' : 'Start'}\r\n          </button>\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={period * 3}\r\n            step={period / 80}\r\n            value={time}\r\n            onChange={(e) => {\r\n              setTime(Number(e.target.value))\r\n              setIsRunning(false)\r\n            }}\r\n            className=\"w-64 accent-indigo-600\"\r\n          />\r\n          <span className=\"text-gray-700\">\r\n            Time: {time.toFixed(1)}s <InlineMath math={timeInPeriodFraction()} />\r\n          </span>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"text-gray-800\">\r\n          赤色の位相：  <InlineMath math={thetaEquation()} />\r\n        </div>\r\n        <div>\r\n         \r\n\r\n          <div className=\"text-red-600\">\r\n            赤色の変位： <InlineMath math={displacementEquation()} />\r\n          </div>\r\n          {modeState === 'compare' && selectedPoint !== null && (\r\n            <div className=\"text-blue-600 mt-2\">\r\n              青色の変位： <InlineMath math={displacementEquation(true)} />\r\n                　,　\r\n                <InlineMath math={`\\\\Delta \\\\theta = ${(getPhaseDifference() / Math.PI).toFixed(1)}\\\\pi ( ${(getPhaseDifference() * 180 / Math.PI).toFixed(0)}° `} />\r\n                  ）\r\n\r\n            </div>\r\n          )}\r\n\r\n        </div>\r\n      </div>\r\n      <br />\r\n      <p>\r\n      説明：\r\n    </p>\r\n    <p>\r\n     【単振動モード】\r\n     <br />単振動の変位、速度、加速度を表示します。\r\n      <br />回転角度を変化させることができ、単振動と円運動の関係を確認できます。\r\n    </p>\r\n    <p>\r\n      【位相比較モード】\r\n      <br />2つの波の位相を比較し、干渉の様子を確認できます。\r\n      <br />青色は赤色の波より位相が遅れて振動していることが確認できます。\r\n      </p>\r\n      <p>\r\n      【虹色モード】\r\n      <br />波の位相を比較し、干渉の様子を確認できます。\r\n      <br />単振動が円運動の射影であることを確認できます。\r\n      </p>\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\n"],"names":["CircularMotionWaveSimulationComponent","period","setPeriod","useState","radius","setRadius","numPoints","setNumPoints","time","setTime","isRunning","setIsRunning","selectedPoint","setSelectedPoint","modeState","setModeState","svgSize","setSvgSize","thetaDeg","setThetaDeg","rotationAngle","setRotationAngle","circularMotionRef","useRef","plottedPoints","setPlottedPoints","prevTimeRef","useEffect","updateSize","current","width","offsetWidth","window","addEventListener","removeEventListener","timer","setInterval","t","clearInterval","getRotatedCoordinates","x","y","angle","radians","Math","PI","cos","getAngleCoordinates","sin","getPhaseDifference","getColor","index","getPointSize","start","size","max","togglePoint","prev","newThetaDeg","toFixed","displacementEquation","isBlue","arguments","length","undefined","phaseDiff","numericOmega","calculatePoints","offsetPeriod","Array","from","_","i","delay","effectiveTime","rotated","points1","points2","velocity","acceleration","calculateVelocityAndAcceleration","omega","v_x","v_y","a_x","a_y","currentValue","interval","floor","value","maxValue","plotPoints","map","point","abs","_jsxs","className","children","_jsx","type","name","checked","onChange","id","htmlFor","ref","cx","cy","rx","ry","stroke","strokeWidth","fill","x1","y1","x2","y2","strokeDasharray","r","onClick","style","cursor","d","fontSize","textAnchor","dominantBaseline","_Fragment","markerEnd","markerWidth","markerHeight","refX","refY","orient","points","p","min","n","e","Number","target","step","InlineMath","math"],"sourceRoot":""}